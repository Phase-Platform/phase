# Phase Platform - Development Docker Compose

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: phase-platform-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-phase_dev}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD:-trust}
      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS:-'--encoding=UTF-8'}
      LANG: ${LANG:-en_US.utf8}
      LC_ALL: ${LC_ALL:-en_US.utf8}
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./docker/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    networks:
      - phase-dev-network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-phase_dev}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    command: postgres -c 'max_connections=${POSTGRES_MAX_CONNECTIONS:-1000}'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: phase-platform-redis-dev
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-pkIlv/rtqkskHtat7wvFkw==}
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD:-pkIlv/rtqkskHtat7wvFkw==}"
    volumes:
      - redis_dev_data:/data
    ports:
      - '${REDIS_PORT:-6379}:6379'
    networks:
      - phase-dev-network
    healthcheck:
      test:
        [
          'CMD',
          'redis-cli',
          '-a',
          '${REDIS_PASSWORD:-pkIlv/rtqkskHtat7wvFkw==}',
          'ping',
        ]
      interval: 10s
      timeout: 3s
      retries: 5

  # MinIO (S3-compatible object storage for development)
  minio:
    image: minio/minio:latest
    container_name: phase-platform-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-phaseadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-phaseadmin123}
      MINIO_REGION: ${MINIO_REGION:-us-east-1}
      MINIO_BROWSER_REDIRECT_URL: ${MINIO_BROWSER_REDIRECT_URL:-http://localhost:9001}
    command: server /data --console-address ":9001"
    ports:
      - '${MINIO_API_PORT:-9000}:9000' # API
      - '${MINIO_CONSOLE_PORT:-9001}:9001' # Console
    volumes:
      - minio_dev_data:/data
    networks:
      - phase-dev-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3

  # Mailhog (Email Testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: phase-platform-mailhog
    restart: unless-stopped
    ports:
      - '${MAILHOG_SMTP_PORT:-1025}:1025' # SMTP server
      - '${MAILHOG_WEB_PORT:-8025}:8025' # Web interface
    networks:
      - phase-dev-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8025/api/v2/messages']
      interval: 30s
      timeout: 10s
      retries: 3

  # Adminer (Database Management Interface)
  adminer:
    image: adminer:latest
    container_name: phase-platform-adminer
    restart: unless-stopped
    ports:
      - '${ADMINER_PORT:-8080}:8080'
    environment:
      ADMINER_DEFAULT_SERVER: ${ADMINER_DEFAULT_SERVER:-postgres}
      ADMINER_DESIGN: ${ADMINER_DESIGN:-dracula}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - phase-dev-network

  # Redis Commander (Redis Management Interface)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: phase-platform-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD:-pkIlv/rtqkskHtat7wvFkw==}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - '${REDIS_COMMANDER_PORT:-8081}:8081'
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - phase-dev-network

networks:
  phase-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: ${DOCKER_SUBNET:-172.21.0.0/16}

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  minio_dev_data:
    driver: local
