// SDLC Management Platform Database Schema
// Comprehensive schema for Software Development Lifecycle Management
// Supports multiple methodologies: Agile/Scrum, Kanban, Waterfall, SAFe

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// Core User Management & Authentication
// ==========================================

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  
  // Profile Information
  title         String?
  department    String?
  timezone      String?   @default("UTC")
  skills        String[]  // Technical skills
  preferences   Json?     @db.JsonB
  phoneNumber   String?
  bio           String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts            Account[]
  sessions            Session[]
  memberships         Membership[]
  teamMembers         TeamMember[]
  projectMembers      ProjectMember[]
  ownedProjects       Project[]         @relation("ProjectOwner")
  assignedTasks       Task[]              @relation("TaskAssignee")
  createdTasks        Task[]              @relation("TaskCreator")
  assignedFeatures    Feature[]           @relation("AssignedUser")
  assignedBugs        Bug[]               @relation("AssignedUser")
  reportedBugs        Bug[]               @relation("ReportedUser")
  testExecutions      TestExecution[]
  comments            Comment[]
  activityLogs        ActivityLog[]
  timeEntries         TimeEntry[]
  notifications       Notification[]
  createdDocuments    Document[]
  createdReleases     Release[]
  sentInvitations     Invitation[]
  phaseResponsible    Phase[]             @relation("PhaseResponsible")
  attachments         Attachment[]
  codeReviews         CodeReview[]        @relation("CodeReviewer")
  authoredCodeReviews CodeReview[]        @relation("CodeAuthor")
  phaseComponentAssignee PhaseComponent[] @relation("ComponentAssignee")
  subPhaseAssignee    SubPhase[]          @relation("SubPhaseAssignee")
  approvedGates       PhaseGate[]         @relation("GateApprover")
  rejectedGates       PhaseGate[]         @relation("GateRejecter")
  auditLogs           AuditLog[]
  entityVersions      EntityVersion[]
  integrations        Integration[]
  webhooks            Webhook[]
  automationRules     AutomationRule[]
  createdChannels     TeamChannel[]       @relation("ChannelCreator")
  createdTestCases    TestCase[]          @relation("TestCaseCreator")

  @@index([email])
  @@index([role])
  @@index([isActive])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ==========================================
// Organization & Team Management
// ==========================================

model Organization {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String?
  logo        String?
  website     String?
  isActive    Boolean @default(true)
  
  // Settings
  settings Json? @db.JsonB

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  memberships       Membership[]
  teams            Team[]
  projects         Project[]
  workflowTemplates WorkflowTemplate[]
  invitations      Invitation[]
  billingInfo      BillingInfo?
  orgSettings      OrganizationSetting?

  @@index([isActive])
  @@index([slug])
  @@map("organizations")
}

model OrganizationSetting {
  id             String   @id @default(cuid())
  organizationId String   @unique
  theme          String   @default("light")
  features       Json     @db.JsonB
  security       Json     @db.JsonB
  notifications  Json     @db.JsonB
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@map("organization_settings")
}

model Membership {
  id             String   @id @default(cuid())
  role           Role
  permissions    Json?    @db.JsonB
  userId         String
  organizationId String
  isActive       Boolean  @default(true)
  joinedAt       DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
  @@map("memberships")
}

model Team {
  id             String   @id @default(cuid())
  name           String
  description    String?
  color          String?
  organizationId String
  leaderId       String?
  isActive       Boolean  @default(true)
  
  // Team specialization
  specialization TeamSpecialization[]
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members      TeamMember[]
  projects     ProjectTeam[]
  teamMetrics  TeamMetrics[]
  channels     TeamChannel[]

  @@index([organizationId])
  @@map("teams")
}

model TeamMember {
  id       String   @id @default(cuid())
  teamId   String
  userId   String
  role     TeamRole @default(MEMBER)
  joinedAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([teamId])
  @@index([userId])
  @@map("team_members")
}

model ProjectTeam {
  id        String @id @default(cuid())
  projectId String
  teamId    String

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  team    Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([projectId, teamId])
  @@map("project_teams")
}

// ==========================================
// Project & Methodology Management
// ==========================================

model Project {
  id             String        @id @default(cuid())
  name           String
  slug           String        @unique
  description    String?
  organizationId String
  ownerId        String
  status         ProjectStatus @default(ACTIVE)
  priority       Priority      @default(MEDIUM)
  workflowId     String?
  
  // Project Timeline
  startDate      DateTime?
  endDate        DateTime?
  actualStartDate DateTime?
  actualEndDate   DateTime?
  
  // Budget & Resources
  budget         Decimal?      @db.Decimal(12, 2)
  currency       String        @default("USD")
  
  // Repository Integration
  repository     String?
  repositoryType RepositoryType?
  
  // Project Configuration
  isArchived     Boolean       @default(false)
  settings       Json?         @db.JsonB
  metadata       Json?         @db.JsonB
  
  // Methodology Configuration
  methodologyConfigId String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner          User          @relation("ProjectOwner", fields: [ownerId], references: [id])
  workflow       WorkflowTemplate? @relation(fields: [workflowId], references: [id])
  methodologyConfig MethodologyConfig?
  phases         Phase[]
  sprints        Sprint[]
  features       Feature[]
  bugs           Bug[]
  tasks          Task[]
  testCases      TestCase[]
  testSuites     TestSuite[]
  deployments    Deployment[]
  releases       Release[]
  environments   Environment[]
  comments       Comment[]
  activityLogs   ActivityLog[]
  teams          ProjectTeam[]
  documents      Document[]
  codeReviews    CodeReview[]
  attachments    Attachment[]  @relation("ProjectAttachments")
  timeEntries    TimeEntry[]   @relation("ProjectTimeEntries")
  notifications  Notification[] @relation("ProjectNotifications")
  auditLogs      AuditLog[]
  integrations   Integration[]
  webhooks       Webhook[]
  projectMetrics ProjectMetrics?
  customFields   CustomField[]
  automationRules AutomationRule[]
  workflowTransitions WorkflowTransition[]
  metrics        Metric[]
  projectSettings ProjectSetting?
  milestones     ProjectMilestone[]
  repositories   ProjectRepository[]
  members        ProjectMember[]

  @@index([organizationId])
  @@index([ownerId])
  @@index([status])
  @@index([slug])
  @@index([createdAt])
  @@map("projects")
}

model MethodologyConfig {
  id              String      @id @default(cuid())
  projectId       String      @unique
  methodology     Methodology
  configuration   Json        @db.JsonB
  
  // Agile/Scrum specific
  sprintDuration  Int?        // in days
  velocityTarget  Float?
  storyPointScale String[]    // e.g., ["1", "2", "3", "5", "8", "13"]
  
  // Kanban specific
  wipLimits       Json?       @db.JsonB
  columns         Json?       @db.JsonB
  
  // Waterfall specific
  requireGateApprovals Boolean @default(false)
  gateApprovers        String[] // User IDs who can approve gates
  
  // SAFe specific
  programIncrement     Int?    // PI duration in weeks
  releaseTrainConfig   Json?   @db.JsonB
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("methodology_configs")
}

// ==========================================
// Workflow Templates & SDLC Phases
// ==========================================

model WorkflowTemplate {
  id             String   @id @default(cuid())
  name           String
  description    String?
  category       String
  methodology    Methodology
  organizationId String?
  isPublic       Boolean  @default(false)
  isActive       Boolean  @default(true)
  version        String   @default("1.0")
  metadata       Json?    @db.JsonB
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization   Organization?    @relation(fields: [organizationId], references: [id])
  phaseTemplates PhaseTemplate[]
  projects       Project[]

  @@index([methodology])
  @@index([category])
  @@map("workflow_templates")
}

model PhaseTemplate {
  id              String           @id @default(cuid())
  name            String
  description     String?
  type            SDLCPhaseType
  order           Int
  workflowId      String
  estimatedDays   Int?
  isRequired      Boolean          @default(true)
  gateConditions  Json?            @db.JsonB
  
  // Role & Access Control
  allowedRoles    Role[]
  primaryRole     Role?
  
  // Dependencies
  dependencies    String[]         // IDs of other phase templates
  
  // Deliverables & Criteria
  deliverables    Json?            @db.JsonB
  exitCriteria    Json?            @db.JsonB
  
  metadata        Json?            @db.JsonB
  createdAt       DateTime         @default(now())

  workflow        WorkflowTemplate @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  taskTemplates   TaskTemplate[]
  componentTemplates ComponentTemplate[]
  subPhaseTemplates SubPhaseTemplate[]

  @@index([workflowId])
  @@index([type])
  @@map("phase_templates")
}

// Enhanced Phase Model with Sub-phases
model Phase {
  id              String      @id @default(cuid())
  name            String
  description     String?
  type            SDLCPhaseType
  order           Int
  status          PhaseStatus @default(NOT_STARTED)
  projectId       String
  templateId      String?
  responsibleId   String?     // Primary responsible person
  
  // Timeline
  startDate       DateTime?
  endDate         DateTime?
  actualStartDate DateTime?
  actualEndDate   DateTime?
  
  // Progress & Metrics
  progress        Float       @default(0)
  storyPoints     Int?
  completedPoints Int         @default(0)
  
  // Phase Configuration
  allowedRoles    Role[]
  primaryRole     Role?
  gateConditions  Json?       @db.JsonB
  deliverables    Json?       @db.JsonB
  exitCriteria    Json?       @db.JsonB
  
  // Dependencies
  dependencies    String[]    // IDs of other phases
  
  metadata        Json?       @db.JsonB
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  project         Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  responsible     User?       @relation("PhaseResponsible", fields: [responsibleId], references: [id])
  tasks           Task[]
  components      PhaseComponent[]
  subPhases       SubPhase[]
  gates           PhaseGate[]
  phaseAccess     PhaseAccess[]
  documents       Document[]    @relation("PhaseDocuments")
  timeEntries     TimeEntry[]   @relation("PhaseTimeEntries")
  notifications   Notification[] @relation("PhaseNotifications")
  checkpoints     PhaseCheckpoint[]
  metrics         PhaseMetric[]

  @@index([projectId])
  @@index([status])
  @@index([type])
  @@map("phases")
}

// Phase Checkpoint Model for tracking key milestones
model PhaseCheckpoint {
  id          String      @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime
  status      CheckpointStatus @default(PENDING)
  phaseId     String
  metadata    Json?       @db.JsonB
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  phase       Phase       @relation(fields: [phaseId], references: [id], onDelete: Cascade)

  @@index([phaseId])
  @@index([status])
  @@map("phase_checkpoints")
}

// Phase Metric Model for tracking progress and KPIs
model PhaseMetric {
  id          String      @id @default(cuid())
  name        String
  value       Float
  target      Float
  unit        String
  type        MetricType
  phaseId     String
  metadata    Json?       @db.JsonB
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  phase       Phase       @relation(fields: [phaseId], references: [id], onDelete: Cascade)

  @@index([phaseId])
  @@index([type])
  @@map("phase_metrics")
}

enum CheckpointStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  BLOCKED
  CANCELLED
}

enum MetricType {
  PERCENTAGE
  COUNT
  DURATION
  CURRENCY
  CUSTOM
}

// New Sub-Phase Model for detailed phase breakdown
model SubPhase {
  id              String           @id @default(cuid())
  name            String
  description     String?
  type            SubPhaseType
  order           Int
  status          SubPhaseStatus   @default(NOT_STARTED)
  phaseId         String
  templateId      String?
  assigneeId      String?
  
  // Timeline
  startDate       DateTime?
  endDate         DateTime?
  actualStartDate DateTime?
  actualEndDate   DateTime?
  
  // Progress & Estimation
  progress        Float            @default(0)
  estimatedHours  Float?
  actualHours     Float?
  complexity      ComplexityLevel  @default(MEDIUM)
  
  // Dependencies
  dependencies    String[]         // IDs of other sub-phases
  prerequisites   Json?            @db.JsonB
  
  // Sub-phase specific data
  technology      String?          // Technology/framework used
  framework       String?
  requirements    Json?            @db.JsonB
  deliverables    Json?            @db.JsonB
  
  metadata        Json?            @db.JsonB
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  phase           Phase            @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  assignee        User?            @relation("SubPhaseAssignee", fields: [assigneeId], references: [id])
  tasks           Task[]
  components      PhaseComponent[]

  @@index([phaseId])
  @@index([type])
  @@index([status])
  @@index([assigneeId])
  @@map("sub_phases")
}

model SubPhaseTemplate {
  id              String          @id @default(cuid())
  name            String
  description     String?
  type            SubPhaseType
  order           Int
  phaseTemplateId String
  estimatedHours  Float?
  complexity      ComplexityLevel @default(MEDIUM)
  assigneeRole    Role?
  isRequired      Boolean         @default(true)
  dependencies    String[]
  prerequisites   Json?           @db.JsonB
  technology      String?
  framework       String?
  requirements    Json?           @db.JsonB
  deliverables    Json?           @db.JsonB
  metadata        Json?           @db.JsonB
  createdAt       DateTime        @default(now())

  phaseTemplate   PhaseTemplate   @relation(fields: [phaseTemplateId], references: [id], onDelete: Cascade)

  @@index([phaseTemplateId])
  @@index([type])
  @@map("sub_phase_templates")
}

model PhaseComponent {
  id          String            @id @default(cuid())
  name        String
  description String?
  type        ComponentType
  status      ComponentStatus   @default(NOT_STARTED)
  phaseId     String?
  subPhaseId  String?
  templateId  String?
  assignedId  String?
  
  // Progress & Estimation
  progress    Float             @default(0)
  estimatedHours Float?
  actualHours    Float?
  priority    Priority          @default(MEDIUM)
  
  // Technical Details
  technology  String?           // Technology stack
  repository  String?           // Repository URL
  branch      String?           // Git branch
  
  // Dependencies
  dependencies String[]         // IDs of other components
  
  metadata    Json?             @db.JsonB
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  phase       Phase?            @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  subPhase    SubPhase?         @relation(fields: [subPhaseId], references: [id], onDelete: Cascade)
  assignee    User?             @relation("ComponentAssignee", fields: [assignedId], references: [id])
  tasks       Task[]

  @@index([phaseId])
  @@index([subPhaseId])
  @@index([type])
  @@index([status])
  @@index([assignedId])
  @@map("phase_components")
}

model ComponentTemplate {
  id              String        @id @default(cuid())
  name            String
  description     String?
  type            ComponentType
  phaseTemplateId String
  order           Int
  estimatedHours  Float?
  assigneeRole    Role?
  isRequired      Boolean       @default(true)
  dependencies    String[]
  technology      String?
  metadata        Json?         @db.JsonB
  createdAt       DateTime      @default(now())

  phaseTemplate   PhaseTemplate @relation(fields: [phaseTemplateId], references: [id], onDelete: Cascade)

  @@index([phaseTemplateId])
  @@map("component_templates")
}

model PhaseGate {
  id          String      @id @default(cuid())
  name        String
  description String?
  phaseId     String
  type        GateType    @default(QUALITY_GATE)
  conditions  Json        @db.JsonB
  status      GateStatus  @default(PENDING)
  approvers   String[]    // User IDs who can approve
  approvedBy  String?
  approvedAt  DateTime?
  rejectedBy  String?
  rejectedAt  DateTime?
  comments    String?
  
  // Gate criteria and checklist
  criteria    Json?       @db.JsonB
  checklist   Json?       @db.JsonB
  artifacts   String[]    // Required artifacts/documents
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  phase       Phase       @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  approver    User?       @relation("GateApprover", fields: [approvedBy], references: [id])
  rejecter    User?       @relation("GateRejecter", fields: [rejectedBy], references: [id])

  @@index([phaseId])
  @@index([status])
  @@map("phase_gates")
}

model PhaseAccess {
  id        String @id @default(cuid())
  phaseId   String
  role      Role
  canView   Boolean @default(false)
  canEdit   Boolean @default(false)
  canCreate Boolean @default(false)
  canDelete Boolean @default(false)
  canApprove Boolean @default(false)
  
  // Access Levels
  accessLevel AccessLevel @default(VIEW_ONLY)
  
  phase Phase @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  
  @@unique([phaseId, role])
  @@map("phase_access")
}

// ==========================================
// Sprint & Agile Management
// ==========================================

model Sprint {
  id          String       @id @default(cuid())
  name        String
  description String?
  status      SprintStatus @default(PLANNED)
  goal        String?
  
  // Sprint Timeline
  startDate   DateTime?
  endDate     DateTime?
  
  // Sprint Metrics
  capacity    Int?         // Total story points capacity
  commitment  Int?         // Committed story points
  velocity    Float?       // Actual velocity achieved
  
  // Project Reference
  projectId   String

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project  Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  features Feature[]
  bugs     Bug[]

  @@index([projectId])
  @@index([status])
  @@index([startDate])
  @@map("sprints")
}

// ==========================================
// Feature & Task Management
// ==========================================

model Feature {
  id          String        @id @default(cuid())
  title       String
  description String?
  status      FeatureStatus @default(BACKLOG)
  priority    Priority      @default(MEDIUM)
  
  // Story Details
  storyPoints    Int?
  businessValue  Int?
  acceptanceCriteria String?
  
  // Assignment
  assignedUserId String?
  
  // Project & Sprint
  projectId   String
  sprintId    String?
  
  // Feature Hierarchy
  parentFeatureId String?
  
  // Labels & Tags
  labels      String[]
  tags        Json?        @db.JsonB

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  completedAt DateTime?

  // Relations
  project         Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sprint          Sprint?     @relation(fields: [sprintId], references: [id])
  assignedUser    User?       @relation("AssignedUser", fields: [assignedUserId], references: [id])
  parentFeature   Feature?    @relation("FeatureHierarchy", fields: [parentFeatureId], references: [id])
  childFeatures   Feature[]   @relation("FeatureHierarchy")
  tasks           Task[]
  testCases       TestCase[]
  bugs            Bug[]
  comments        Comment[]     @relation("FeatureComments")
  activityLogs    ActivityLog[] @relation("FeatureActivityLogs")

  @@index([projectId])
  @@index([sprintId])
  @@index([status])
  @@index([assignedUserId])
  @@index([parentFeatureId])
  @@map("features")
}

model Task {
  id            String     @id @default(cuid())
  title         String
  description   String?
  status        TaskStatus @default(TODO)
  priority      Priority   @default(MEDIUM)
  type          TaskType   @default(DEVELOPMENT)
  
  // Assignment
  assigneeId    String?
  creatorId     String
  
  // Project Relations
  projectId     String
  phaseId       String?
  subPhaseId    String?
  componentId   String?
  featureId     String?
  templateId    String?
  
  // Time Estimation & Tracking
  estimatedHours Float?
  actualHours   Float?
  
  // Timeline
  startDate     DateTime?
  dueDate       DateTime?
  completedAt   DateTime?
  
  // Task Configuration
  tags          String[]   // Array of tags
  dependencies  Json?      @db.JsonB
  subtasks      Json?      @db.JsonB
  
  // Code Integration
  branch        String?
  pullRequest   String?
  commitHash    String?
  
  // Technical Details
  technology    String?    // Technology/language used
  complexity    ComplexityLevel @default(MEDIUM)
  
  metadata      Json?      @db.JsonB
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Relations
  assignee      User?           @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator       User            @relation("TaskCreator", fields: [creatorId], references: [id])
  project       Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  phase         Phase?          @relation(fields: [phaseId], references: [id])
  subPhase      SubPhase?       @relation(fields: [subPhaseId], references: [id])
  component     PhaseComponent? @relation(fields: [componentId], references: [id])
  feature       Feature?        @relation(fields: [featureId], references: [id])
  comments      Comment[]       @relation("TaskComments")
  attachments   Attachment[]
  timeEntries   TimeEntry[]     @relation("TaskTimeEntries")
  codeReviews   CodeReview[]

  @@index([projectId])
  @@index([phaseId])
  @@index([subPhaseId])
  @@index([assigneeId])
  @@index([status])
  @@index([type])
  @@map("tasks")
}

model TaskTemplate {
  id            String   @id @default(cuid())
  title         String
  description   String?
  type          TaskType @default(DEVELOPMENT)
  phaseId       String
  order         Int
  estimatedHours Float?
  assigneeRole  Role?
  isRequired    Boolean  @default(true)
  dependencies  Json?    @db.JsonB
  technology    String?
  complexity    ComplexityLevel @default(MEDIUM)
  metadata      Json?    @db.JsonB
  createdAt     DateTime @default(now())

  phase PhaseTemplate @relation(fields: [phaseId], references: [id], onDelete: Cascade)

  @@index([phaseId])
  @@map("task_templates")
}

// ==========================================
// Bug & Issue Management
// ==========================================

model Bug {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      BugStatus  @default(OPEN)
  severity    Severity   @default(MEDIUM)
  priority    Priority   @default(MEDIUM)
  
  // Bug Details
  stepsToReproduce String?
  expectedBehavior String?
  actualBehavior   String?
  environment      String?
  browserInfo      String?
  deviceInfo       String?
  
  // Assignment & Tracking
  assignedUserId String?
  reportedUserId String?
  
  // Project & Sprint
  projectId   String
  sprintId    String?
  featureId   String?
  
  // Resolution
  resolution  String?
  rootCause   String?
  
  // Labels & Tags
  labels      String[]
  tags        Json?      @db.JsonB

  // Timestamps
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  resolvedAt DateTime?
  closedAt   DateTime?

  // Relations
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sprint       Sprint?  @relation(fields: [sprintId], references: [id])
  feature      Feature? @relation(fields: [featureId], references: [id])
  assignedUser User?    @relation("AssignedUser", fields: [assignedUserId], references: [id])
  reportedUser User?    @relation("ReportedUser", fields: [reportedUserId], references: [id])
  comments     Comment[]     @relation("BugComments")
  activityLogs ActivityLog[] @relation("BugActivityLogs")
  attachments  Attachment[]  @relation("BugAttachments")

  @@index([projectId])
  @@index([sprintId])
  @@index([featureId])
  @@index([status])
  @@index([severity])
  @@index([assignedUserId])
  @@index([reportedUserId])
  @@map("bugs")
}

// ==========================================
// Testing & Quality Assurance
// ==========================================

model TestSuite {
  id          String  @id @default(cuid())
  name        String
  description String?
  type        TestSuiteType @default(FUNCTIONAL)
  projectId   String
  
  // Test Configuration
  environment String?
  automated   Boolean @default(false)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  testCases TestCase[]

  @@index([projectId])
  @@index([type])
  @@map("test_suites")
}

model TestCase {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        TestType
  priority    Priority
  status      TestCaseStatus
  projectId   String
  featureId   String?
  suiteId     String?
  createdById String
  expected    String
  metadata    Json?    @db.JsonB
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project     Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  feature     Feature?       @relation(fields: [featureId], references: [id])
  suite       TestSuite?     @relation(fields: [suiteId], references: [id])
  creator     User          @relation("TestCaseCreator", fields: [createdById], references: [id])
  executions  TestExecution[]
  steps       TestStep[]

  @@index([projectId])
  @@index([featureId])
  @@index([suiteId])
  @@index([createdById])
  @@map("test_cases")
}

model TestStep {
  id          String   @id @default(cuid())
  stepNumber  Int
  action      String
  expected    String
  testCaseId  String
  testCase    TestCase @relation(fields: [testCaseId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([testCaseId])
  @@map("test_steps")
}

model TestExecution {
  id           String              @id @default(cuid())
  testCaseId   String
  executedBy   String
  status       TestExecutionStatus @default(NOT_EXECUTED)
  notes        String?
  defects      String[]
  screenshots  String[]            // URLs to screenshots
  
  // Execution Details
  actualResult String?
  environment  String?
  version      String?
  duration     Int?                // in seconds
  buildNumber  String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  testCase TestCase @relation(fields: [testCaseId], references: [id], onDelete: Cascade)
  executor User     @relation(fields: [executedBy], references: [id])

  @@index([testCaseId])
  @@index([executedBy])
  @@index([status])
  @@map("test_executions")
}

// ==========================================
// Enums
// ==========================================

enum UserRole {
  ADMIN
  MANAGER
  DEVELOPER
  TESTER
  DESIGNER
  PRODUCT_OWNER
  SCRUM_MASTER
  STAKEHOLDER
  USER
}

enum Role {
  ADMIN
  MANAGER
  DEVELOPER
  QA
  DESIGNER
  BA
  DEVOPS
  STAKEHOLDER
  VIEWER
}

enum TeamRole {
  LEADER
  MEMBER
  CONTRIBUTOR
}

enum TeamSpecialization {
  FRONTEND
  BACKEND
  FULLSTACK
  DEVOPS
  QA
  DESIGN
  PRODUCT
  ARCHITECTURE
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
  ARCHIVED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum RepositoryType {
  GITHUB
  GITLAB
  BITBUCKET
  AZURE_DEVOPS
  OTHER
}

enum Methodology {
  AGILE
  SCRUM
  KANBAN
  WATERFALL
  SAFE
  HYBRID
}

enum SDLCPhaseType {
  REQUIREMENTS
  DESIGN
  DEVELOPMENT
  TESTING
  DEPLOYMENT
  MAINTENANCE
  REVIEW
}

enum PhaseStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  BLOCKED
  ON_HOLD
}

enum SubPhaseType {
  FRONTEND
  BACKEND
  DATABASE
  API
  INFRASTRUCTURE
  SECURITY
  PERFORMANCE
  DOCUMENTATION
  REVIEW
}

enum SubPhaseStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  BLOCKED
  ON_HOLD
}

enum ComplexityLevel {
  LOW
  MEDIUM
  HIGH
  EXTREME
}

enum ComponentType {
  FRONTEND
  BACKEND
  DATABASE
  API
  INFRASTRUCTURE
  SECURITY
  PERFORMANCE
  DOCUMENTATION
}

enum ComponentStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  BLOCKED
  ON_HOLD
}

enum GateType {
  QUALITY_GATE
  SECURITY_GATE
  PERFORMANCE_GATE
  COMPLIANCE_GATE
  ARCHITECTURE_GATE
}

enum GateStatus {
  PENDING
  APPROVED
  REJECTED
  WAIVED
}

enum SprintStatus {
  PLANNED
  ACTIVE
  COMPLETED
  CANCELLED
}

enum FeatureStatus {
  BACKLOG
  PLANNED
  IN_PROGRESS
  REVIEW
  COMPLETED
  BLOCKED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
  BLOCKED
}

enum TaskType {
  DEVELOPMENT
  TESTING
  DESIGN
  DOCUMENTATION
  REVIEW
  MEETING
  OTHER
}

enum BugStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  REOPENED
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  BLOCKER
}

enum TestSuiteType {
  FUNCTIONAL
  INTEGRATION
  UNIT
  E2E
  PERFORMANCE
  SECURITY
  USABILITY
}

enum TestCaseStatus {
  ACTIVE
  INACTIVE
  DEPRECATED
}

enum TestType {
  FUNCTIONAL
  INTEGRATION
  UNIT
  E2E
  PERFORMANCE
  SECURITY
  USABILITY
}

enum TestExecutionStatus {
  NOT_EXECUTED
  PASSED
  FAILED
  BLOCKED
  SKIPPED
}

enum CodeReviewStatus {
  PENDING
  IN_PROGRESS
  APPROVED
  REJECTED
  NEEDS_CHANGES
}

enum CodeReviewType {
  FEATURE
  BUGFIX
  REFACTOR
  DOCUMENTATION
  PERFORMANCE
  SECURITY
}

enum AccessLevel {
  NO_ACCESS
  VIEW_ONLY
  FULL_ACCESS
  VIEW_ALL
}

// ==========================================
// Document Management
// ==========================================

model Document {
  id          String   @id @default(cuid())
  title       String
  content     String?  @db.Text
  type        String
  status      String   @default("DRAFT")
  
  // Document Details
  version     String   @default("1.0")
  tags        String[]
  metadata    Json?    @db.JsonB
  
  // Project Relations
  projectId   String
  phaseId     String?
  createdById String
  
  // Timeline
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?

  // Relations
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  phase       Phase?   @relation("PhaseDocuments", fields: [phaseId], references: [id])
  creator     User     @relation(fields: [createdById], references: [id])
  attachments Attachment[]
  comments    Comment[]     @relation("DocumentComments")

  @@index([projectId])
  @@index([phaseId])
  @@index([createdById])
  @@index([type])
  @@index([status])
  @@map("documents")
}

// ==========================================
// Attachment Management
// ==========================================

model Attachment {
  id          String   @id @default(cuid())
  name        String
  type        String
  url         String
  size        Int
  metadata    Json?    @db.JsonB
  
  // Relations
  userId      String
  projectId   String?
  taskId      String?
  bugId       String?
  documentId  String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  project     Project? @relation("ProjectAttachments", fields: [projectId], references: [id])
  task        Task?    @relation(fields: [taskId], references: [id])
  bug         Bug?     @relation("BugAttachments", fields: [bugId], references: [id])
  document    Document? @relation(fields: [documentId], references: [id])

  @@index([userId])
  @@index([projectId])
  @@index([taskId])
  @@index([bugId])
  @@index([documentId])
  @@map("attachments")
}

// ==========================================
// Time Tracking
// ==========================================

model TimeEntry {
  id          String   @id @default(cuid())
  description String?
  duration    Int      // in minutes
  date        DateTime
  
  // Relations
  userId      String
  projectId   String
  taskId      String?
  phaseId     String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  project     Project  @relation("ProjectTimeEntries", fields: [projectId], references: [id])
  task        Task?    @relation("TaskTimeEntries", fields: [taskId], references: [id])
  phase       Phase?   @relation("PhaseTimeEntries", fields: [phaseId], references: [id])

  @@index([userId])
  @@index([projectId])
  @@index([taskId])
  @@index([phaseId])
  @@index([date])
  @@map("time_entries")
}

// ==========================================
// Activity Logging
// ==========================================

model ActivityLog {
  id          String   @id @default(cuid())
  type        String
  description String
  metadata    Json?    @db.JsonB
  
  // Relations
  userId      String
  projectId   String
  entityType  String?
  entityId    String?
  
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  project     Project  @relation(fields: [projectId], references: [id])
  feature     Feature?      @relation("FeatureActivityLogs", fields: [entityId], references: [id], map: "activity_logs_feature_fkey")
  bug         Bug?          @relation("BugActivityLogs", fields: [entityId], references: [id], map: "activity_logs_bug_fkey")

  @@index([userId])
  @@index([projectId])
  @@index([entityType])
  @@index([entityId])
  @@index([type])
  @@map("activity_logs")
}

// ==========================================
// Comments
// ==========================================

model Comment {
  id          String   @id @default(cuid())
  content     String
  metadata    Json?    @db.JsonB
  
  // Relations
  userId      String
  projectId   String
  entityType  String
  entityId    String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  project     Project  @relation(fields: [projectId], references: [id])
  feature     Feature?      @relation("FeatureComments", fields: [entityId], references: [id], map: "comments_feature_fkey")
  task        Task?         @relation("TaskComments", fields: [entityId], references: [id], map: "comments_task_fkey")
  bug         Bug?          @relation("BugComments", fields: [entityId], references: [id], map: "comments_bug_fkey")
  document    Document?     @relation("DocumentComments", fields: [entityId], references: [id], map: "comments_document_fkey")

  @@index([userId])
  @@index([projectId])
  @@index([entityType])
  @@index([entityId])
  @@map("comments")
}

// ==========================================
// Notifications
// ==========================================

model Notification {
  id          String   @id @default(cuid())
  type        String
  title       String
  message     String
  read        Boolean  @default(false)
  metadata    Json?    @db.JsonB
  
  // Relations
  userId      String
  projectId   String?
  phaseId     String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  project     Project? @relation("ProjectNotifications", fields: [projectId], references: [id])
  phase       Phase?   @relation("PhaseNotifications", fields: [phaseId], references: [id])

  @@index([userId])
  @@index([projectId])
  @@index([phaseId])
  @@index([type])
  @@index([read])
  @@map("notifications")
}

// ==========================================
// Release Management
// ==========================================

model Release {
  id          String   @id @default(cuid())
  version     String
  name        String
  description String?
  status      String   @default("DRAFT")
  
  // Release Details
  releaseDate DateTime?
  notes       String?  @db.Text
  metadata    Json?    @db.JsonB
  
  // Relations
  projectId   String
  createdById String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creator     User     @relation(fields: [createdById], references: [id])
  deployments Deployment[]  @relation("ReleaseDeployments")

  @@index([projectId])
  @@index([createdById])
  @@index([status])
  @@map("releases")
}

// ==========================================
// Environment Management
// ==========================================

model Environment {
  id          String   @id @default(cuid())
  name        String
  type        String
  status      String   @default("ACTIVE")
  
  // Environment Details
  url         String?
  credentials Json?    @db.JsonB
  metadata    Json?    @db.JsonB
  
  // Relations
  projectId   String
  deployments Deployment[]  @relation("EnvironmentDeployments")
  variables   EnvironmentVariable[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([type])
  @@index([status])
  @@map("environments")
}

model EnvironmentVariable {
  id            String   @id @default(cuid())
  key           String
  value         String
  isSecret      Boolean  @default(false)
  environmentId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@unique([environmentId, key])
  @@index([environmentId])
  @@map("environment_variables")
}

// ==========================================
// Deployment Management
// ==========================================

model Deployment {
  id          String   @id @default(cuid())
  version     String
  status      String   @default("PENDING")
  
  // Deployment Details
  startTime   DateTime?
  endTime     DateTime?
  logs        String?  @db.Text
  metadata    Json?    @db.JsonB
  
  // Relations
  projectId   String
  environmentId String
  releaseId   String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  environment Environment @relation("EnvironmentDeployments", fields: [environmentId], references: [id])
  release     Release?    @relation("ReleaseDeployments", fields: [releaseId], references: [id])

  @@index([projectId])
  @@index([environmentId])
  @@index([releaseId])
  @@index([status])
  @@map("deployments")
}

// ==========================================
// Invitation Management
// ==========================================

model Invitation {
  id             String   @id @default(cuid())
  email          String
  role           Role
  status         String   @default("PENDING")
  
  // Invitation Details
  token          String   @unique
  expiresAt      DateTime
  metadata       Json?    @db.JsonB
  
  // Relations
  organizationId String
  sentById       String
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  sender         User        @relation(fields: [sentById], references: [id])

  @@index([organizationId])
  @@index([sentById])
  @@index([email])
  @@index([status])
  @@map("invitations")
}

// ==========================================
// Billing Management
// ==========================================

model BillingInfo {
  id             String   @id @default(cuid())
  plan           String
  status         String   @default("ACTIVE")
  
  // Billing Details
  startDate      DateTime
  endDate        DateTime?
  amount         Decimal  @db.Decimal(12, 2)
  currency       String   @default("USD")
  metadata       Json?    @db.JsonB
  
  // Relations
  organizationId String   @unique
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([status])
  @@map("billing_info")
}

// ==========================================
// Code Review & Quality
// ==========================================

model CodeReview {
  id          String           @id @default(cuid())
  title       String
  description String?
  status      CodeReviewStatus @default(PENDING)
  type        CodeReviewType   @default(FEATURE)
  
  // Review Details
  changes     Json?            @db.JsonB
  comments    Json?            @db.JsonB
  metrics     Json?            @db.JsonB
  
  // Assignment
  authorId    String
  reviewerId  String?
  
  // Project Relations
  projectId   String
  taskId      String?
  
  // Timeline
  startedAt   DateTime?
  completedAt DateTime?
  
  // Metadata
  metadata    Json?            @db.JsonB
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  author      User             @relation("CodeAuthor", fields: [authorId], references: [id])
  reviewer    User?            @relation("CodeReviewer", fields: [reviewerId], references: [id])
  project     Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task        Task?            @relation(fields: [taskId], references: [id])

  @@index([projectId])
  @@index([authorId])
  @@index([reviewerId])
  @@index([status])
  @@index([type])
  @@map("code_reviews")
}

// Add default phase access configurations
model PhaseAccessTemplate {
  id          String      @id @default(cuid())
  phaseType   SDLCPhaseType
  role        Role
  accessLevel AccessLevel
  
  @@unique([phaseType, role])
  @@map("phase_access_templates")
}

// Add role-based phase access configuration
model RolePhaseAccess {
  id          String      @id @default(cuid())
  role        Role
  phaseType   SDLCPhaseType
  accessLevel AccessLevel
  
  @@unique([role, phaseType])
  @@map("role_phase_access")
}

// ==========================================
// Audit & Versioning
// ==========================================

model AuditLog {
  id          String   @id @default(cuid())
  action      String   // CREATE, UPDATE, DELETE
  entityType  String   // The type of entity being modified
  entityId    String   // The ID of the entity being modified
  userId      String   // Who performed the action
  projectId   String?
  changes     Json?    @db.JsonB  // What changed
  metadata    Json?    @db.JsonB
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  project     Project? @relation(fields: [projectId], references: [id])

  @@index([userId])
  @@index([projectId])
  @@index([entityType])
  @@index([entityId])
  @@index([action])
  @@map("audit_logs")
}

model EntityVersion {
  id          String   @id @default(cuid())
  entityType  String
  entityId    String
  version     Int
  data        Json     @db.JsonB
  createdById String
  createdAt   DateTime @default(now())

  creator     User     @relation(fields: [createdById], references: [id])

  @@unique([entityType, entityId, version])
  @@index([entityType])
  @@index([entityId])
  @@map("entity_versions")
}

// ==========================================
// Integration & Webhooks
// ==========================================

model Integration {
  id          String   @id @default(cuid())
  name        String
  type        String   // GITHUB, FIGMA, JIRA, etc.
  status      String   @default("ACTIVE")
  config      Json     @db.JsonB
  metadata    Json?    @db.JsonB
  
  // Relations
  projectId   String
  createdById String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creator     User     @relation(fields: [createdById], references: [id])
  logs        IntegrationLog[]
  settings    IntegrationSetting?

  @@index([projectId])
  @@index([type])
  @@index([status])
  @@map("integrations")
}

model IntegrationLog {
  id            String   @id @default(cuid())
  integrationId String
  level         String
  message       String
  metadata      Json?    @db.JsonB
  createdAt     DateTime @default(now())

  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@index([integrationId])
  @@map("integration_logs")
}

model IntegrationSetting {
  id            String   @id @default(cuid())
  integrationId String
  syncInterval  Int      // in seconds
  retryAttempts Int
  timeout       Int      // in seconds
  enabled       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@unique([integrationId])
  @@index([integrationId])
  @@map("integration_settings")
}

model Webhook {
  id          String   @id @default(cuid())
  url         String
  events      String[] // Array of event types to trigger the webhook
  secret      String?  // For webhook signature verification
  status      String   @default("ACTIVE")
  metadata    Json?    @db.JsonB
  
  // Relations
  projectId   String
  createdById String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creator     User     @relation(fields: [createdById], references: [id])

  @@index([projectId])
  @@index([status])
  @@map("webhooks")
}

// ==========================================
// Metrics & Analytics
// ==========================================

model ProjectMetrics {
  id          String   @id @default(cuid())
  projectId   String   @unique
  metrics     Json     @db.JsonB  // Store various metrics like velocity, burndown, etc.
  period      String   // DAILY, WEEKLY, MONTHLY
  startDate   DateTime
  endDate     DateTime
  metadata    Json?    @db.JsonB
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([period])
  @@index([startDate])
  @@map("project_metrics")
}

model TeamMetrics {
  id          String   @id @default(cuid())
  teamId      String
  metrics     Json     @db.JsonB  // Store team-specific metrics
  period      String   // DAILY, WEEKLY, MONTHLY
  startDate   DateTime
  endDate     DateTime
  metadata    Json?    @db.JsonB
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
  @@index([period])
  @@index([startDate])
  @@map("team_metrics")
}

model Metric {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   // PERCENTAGE, DURATION, COUNT, etc.
  value       Float
  target      Float?
  unit        String?
  projectId   String
  metadata    Json?    @db.JsonB
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([type])
  @@map("metrics")
}

// ==========================================
// Custom Fields & Templates
// ==========================================

model CustomField {
  id          String   @id @default(cuid())
  name        String
  type        String   // TEXT, NUMBER, BOOLEAN, SELECT, etc.
  entityType  String   // The type of entity this field belongs to
  required    Boolean  @default(false)
  options     Json?    @db.JsonB  // For SELECT type fields
  metadata    Json?    @db.JsonB
  
  // Relations
  projectId   String
  values      CustomFieldValue[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, name, entityType])
  @@index([projectId])
  @@index([entityType])
  @@map("custom_fields")
}

model CustomFieldValue {
  id            String   @id @default(cuid())
  customFieldId String
  entityId      String
  value         Json     @db.JsonB
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  customField   CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)

  @@unique([customFieldId, entityId])
  @@index([customFieldId])
  @@index([entityId])
  @@map("custom_field_values")
}

// ==========================================
// Automation & Workflows
// ==========================================

model AutomationRule {
  id          String   @id @default(cuid())
  name        String
  description String?
  trigger     Json     @db.JsonB
  actions     Json     @db.JsonB
  projectId   String
  createdById String
  isActive    Boolean  @default(true)
  metadata    Json?    @db.JsonB
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  logs      AutomationLog[]

  @@index([projectId])
  @@index([createdById])
  @@map("automation_rules")
}

model AutomationLog {
  id               String   @id @default(cuid())
  automationRuleId String
  level            String
  message          String
  metadata         Json?    @db.JsonB
  createdAt        DateTime @default(now())

  automationRule AutomationRule @relation(fields: [automationRuleId], references: [id], onDelete: Cascade)

  @@index([automationRuleId])
  @@map("automation_logs")
}

model WorkflowTransition {
  id          String   @id @default(cuid())
  fromStatus  String
  toStatus    String
  conditions  Json?    @db.JsonB
  actions     Json?    @db.JsonB
  metadata    Json?    @db.JsonB
  
  // Relations
  projectId   String
  entityType  String   // The type of entity this transition applies to
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, entityType, fromStatus, toStatus])
  @@index([projectId])
  @@index([entityType])
  @@map("workflow_transitions")
}

model ProjectSetting {
  id                String   @id @default(cuid())
  projectId         String   @unique
  visibility        String   @default("PRIVATE")
  allowGuestAccess  Boolean  @default(false)
  defaultBranch     String   @default("main")
  requireCodeReview Boolean  @default(true)
  requireTests      Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  project          Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@map("project_settings")
}

model ProjectMilestone {
  id          String   @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime
  status      String   @default("PENDING")
  projectId   String
  metadata    Json?    @db.JsonB
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([status])
  @@map("project_milestones")
}

model ProjectRepository {
  id        String   @id @default(cuid())
  name      String
  type      String
  url       String
  branch    String   @default("main")
  status    String   @default("ACTIVE")
  projectId String
  metadata  Json?    @db.JsonB
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([status])
  @@map("project_repositories")
}

// Team Channel Model for team communication
model TeamChannel {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   @default("PUBLIC") // PUBLIC or PRIVATE
  teamId      String
  createdById String
  metadata    Json?    @db.JsonB
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  team      Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  creator   User   @relation("ChannelCreator", fields: [createdById], references: [id])

  @@index([teamId])
  @@index([createdById])
  @@map("team_channels")
}

enum ProjectRole {
  OWNER
  ADMIN
  DEVELOPER
  TESTER
  VIEWER
}

model ProjectMember {
  id          String     @id @default(cuid())
  projectId   String
  userId      String
  role        ProjectRole
  permissions Json?      @db.JsonB
  joinedAt    DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@map("project_members")
}