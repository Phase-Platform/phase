generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  name             String?
  email            String          @unique
  emailVerified    DateTime?
  image            String?
  role             UserRole        @default(USER)
  isActive         Boolean         @default(true)
  lastLoginAt      DateTime?
  title            String?
  department       String?
  timezone         String?         @default("UTC")
  preferences      Json?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  accounts         Account[]
  activityLogs     ActivityLog[]
  assignedBugs     Bug[]           @relation("AssignedUser")
  reportedBugs     Bug[]           @relation("ReportedUser")
  comments         Comment[]
  assignedFeatures Feature[]       @relation("AssignedUser")
  projectMembers   ProjectMember[]
  sessions         Session[]
  testExecutions   TestExecution[]
  ownedProjects    Project[]       @relation("ProjectOwner")
  createdTestCases TestCase[]      @relation("TestCaseCreator")
  createdReleases  Release[]       @relation("ReleaseCreator")

  @@index([email])
  @@index([role])
  @@index([isActive])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Organization {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  logo        String?
  website     String?
  isActive    Boolean   @default(true)
  settings    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projects    Project[]

  @@index([isActive])
  @@map("organizations")
}

model Project {
  id             String          @id @default(cuid())
  name           String
  slug           String          @unique
  description    String?
  status         ProjectStatus   @default(PLANNING)
  priority       Priority        @default(MEDIUM)
  startDate      DateTime?
  endDate        DateTime?
  budget         Decimal?        @db.Decimal(12, 2)
  repository     String?
  settings       Json?
  metadata       Json?
  organizationId String
  ownerId        String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  activityLogs   ActivityLog[]
  bugs           Bug[]
  comments       Comment[]
  deployments    Deployment[]
  environments   Environment[]
  features       Feature[]
  members        ProjectMember[]
  organization   Organization    @relation(fields: [organizationId], references: [id])
  owner          User           @relation("ProjectOwner", fields: [ownerId], references: [id])
  releases       Release[]
  sprints        Sprint[]
  testCases      TestCase[]
  testSuites     TestSuite[]

  @@index([organizationId])
  @@index([ownerId])
  @@index([status])
  @@index([createdAt])
  @@map("projects")
}

model Sprint {
  id          String       @id @default(cuid())
  name        String
  description String?
  status      SprintStatus @default(PLANNED)
  goal        String?
  startDate   DateTime?
  endDate     DateTime?
  capacity    Int?
  commitment  Int?
  projectId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  bugs        Bug[]
  features    Feature[]
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([status])
  @@index([startDate])
  @@map("sprints")
}

model Feature {
  id                 String        @id @default(cuid())
  title              String
  description        String?
  status             FeatureStatus @default(BACKLOG)
  priority           Priority      @default(MEDIUM)
  storyPoints        Int?
  businessValue      Int?
  acceptanceCriteria String?
  assignedUserId     String?
  projectId          String
  sprintId           String?
  parentFeatureId    String?
  labels             String[]
  tags               Json?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  completedAt        DateTime?
  activity_logs      ActivityLog[]
  bugs               Bug[]
  comments           Comment[]
  assignedUser       User?         @relation("AssignedUser", fields: [assignedUserId], references: [id])
  parentFeature      Feature?      @relation("FeatureHierarchy", fields: [parentFeatureId], references: [id])
  childFeatures      Feature[]     @relation("FeatureHierarchy")
  project            Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sprint             Sprint?       @relation(fields: [sprintId], references: [id])
  testCases          TestCase[]

  @@index([projectId])
  @@index([sprintId])
  @@index([status])
  @@index([assignedUserId])
  @@index([parentFeatureId])
  @@map("features")
}

model Bug {
  id               String        @id @default(cuid())
  title            String
  description      String?
  status           BugStatus     @default(OPEN)
  severity         Severity      @default(MEDIUM)
  priority         Priority      @default(MEDIUM)
  stepsToReproduce String?
  expectedBehavior String?
  actualBehavior   String?
  environment      String?
  assignedUserId   String?
  reportedUserId   String?
  projectId        String
  sprintId         String?
  featureId        String?
  resolution       String?
  labels           String[]
  tags             Json?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  resolvedAt       DateTime?
  closedAt         DateTime?
  activity_logs    ActivityLog[]
  assignedUser     User?         @relation("AssignedUser", fields: [assignedUserId], references: [id])
  feature          Feature?      @relation(fields: [featureId], references: [id])
  project          Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  reportedUser     User?         @relation("ReportedUser", fields: [reportedUserId], references: [id])
  sprint           Sprint?       @relation(fields: [sprintId], references: [id])
  comments         Comment[]

  @@index([projectId])
  @@index([sprintId])
  @@index([featureId])
  @@index([status])
  @@index([assignedUserId])
  @@index([reportedUserId])
  @@map("bugs")
}

model TestSuite {
  id          String     @id @default(cuid())
  name        String
  description String?
  projectId   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  test_cases  TestCase[]
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@map("test_suites")
}

model TestCase {
  id            String          @id @default(cuid())
  title         String
  description   String?
  steps         String[]
  expected      String
  status        TestCaseStatus  @default(ACTIVE)
  priority      Priority        @default(MEDIUM)
  type          TestType        @default(FUNCTIONAL)
  preconditions String?
  testData      Json?
  estimatedTime Int?
  projectId     String
  featureId     String?
  testSuiteId   String?
  createdById   String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  feature       Feature?        @relation(fields: [featureId], references: [id])
  project       Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  test_suites   TestSuite?      @relation(fields: [testSuiteId], references: [id])
  createdBy     User            @relation("TestCaseCreator", fields: [createdById], references: [id])
  executions    TestExecution[]

  @@index([projectId])
  @@index([featureId])
  @@index([status])
  @@index([testSuiteId])
  @@index([createdById])
  @@map("test_cases")
}

model TestExecution {
  id           String              @id @default(cuid())
  testCaseId   String
  executedBy   String
  status       TestExecutionStatus @default(NOT_EXECUTED)
  notes        String?
  defects      String[]
  actualResult String?
  environment  String?
  version      String?
  duration     Int?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  executor     User                @relation(fields: [executedBy], references: [id])
  testCase     TestCase            @relation(fields: [testCaseId], references: [id], onDelete: Cascade)

  @@index([testCaseId])
  @@index([executedBy])
  @@index([status])
  @@map("test_executions")
}

model ActivityLog {
  id          String         @id @default(cuid())
  type        String         @default("SYSTEM")
  description String         @default("No description")
  metadata    Json?
  userId      String
  projectId   String
  featureId   String?
  bugId       String?
  createdAt   DateTime       @default(now())
  bugs        Bug?           @relation(fields: [bugId], references: [id], onDelete: Cascade)
  features    Feature?       @relation(fields: [featureId], references: [id], onDelete: Cascade)
  project     Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User           @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([projectId])
  @@index([bugId])
  @@index([createdAt])
  @@index([featureId])
  @@map("activity_logs")
}

model Comment {
  id             String    @id @default(cuid())
  content        String
  userId         String
  projectId      String
  featureId      String?
  bugId          String?
  parentId       String?
  entityId       String    @default("legacy")
  entityType     String    @default("LEGACY")
  metadata       Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  users          User      @relation(fields: [userId], references: [id])
  bugs           Bug?      @relation(fields: [bugId], references: [id], onDelete: Cascade)
  features       Feature?  @relation(fields: [featureId], references: [id], onDelete: Cascade)
  comments       Comment?  @relation("commentsTocomments", fields: [parentId], references: [id])
  other_comments Comment[] @relation("commentsTocomments")
  project        Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([userId])
  @@index([bugId])
  @@index([featureId])
  @@index([parentId])
  @@map("comments")
}

model Release {
  id          String        @id @default(cuid())
  name        String
  version     String
  description String?
  status      ReleaseStatus @default(PLANNED)
  releaseDate DateTime?
  notes       String?
  changelog   Json?
  projectId   String
  createdById String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deployments Deployment[]  @relation("ReleaseDeployments")
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy   User          @relation("ReleaseCreator", fields: [createdById], references: [id])

  @@index([projectId])
  @@index([createdById])
  @@index([status])
  @@map("releases")
}

model Environment {
  id          String          @id @default(cuid())
  name        String
  type        EnvironmentType
  url         String?
  description String?
  projectId   String
  config      Json?
  variables   Json?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  deployments Deployment[]    @relation("EnvironmentDeployments")
  project     Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, name])
  @@index([projectId])
  @@map("environments")
}

model Deployment {
  id            String           @id @default(cuid())
  version       String
  status        DeploymentStatus @default(PENDING)
  branch        String?
  commitHash    String?
  buildNumber   String?
  environmentId String
  projectId     String
  releaseId     String?
  deployedBy    String?
  rollbackTo    String?
  notes         String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  deployedAt    DateTime?
  environment   Environment      @relation("EnvironmentDeployments", fields: [environmentId], references: [id])
  project       Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  release       Release?         @relation("ReleaseDeployments", fields: [releaseId], references: [id])

  @@index([projectId])
  @@index([environmentId])
  @@index([releaseId])
  @@index([status])
  @@map("deployments")
}

model ProjectMember {
  id          String      @id @default(cuid())
  projectId   String
  userId      String
  role        ProjectRole @default(DEVELOPER)
  permissions Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@map("project_members")
}

enum UserRole {
  ADMIN
  MANAGER
  DEVELOPER
  TESTER
  USER
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SprintStatus {
  PLANNED
  ACTIVE
  COMPLETED
  CANCELLED
}

enum FeatureStatus {
  BACKLOG
  SELECTED
  IN_PROGRESS
  REVIEW
  TESTING
  DONE
  CANCELLED
}

enum BugStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  REOPENED
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TestCaseStatus {
  ACTIVE
  INACTIVE
  DEPRECATED
}

enum TestType {
  FUNCTIONAL
  INTEGRATION
  UNIT
  PERFORMANCE
  SECURITY
  USABILITY
  REGRESSION
}

enum TestExecutionStatus {
  NOT_EXECUTED
  PASSED
  FAILED
  BLOCKED
  SKIPPED
}

enum ProjectRole {
  OWNER
  MANAGER
  DEVELOPER
  TESTER
  VIEWER
}

enum ActivityAction {
  CREATE
  UPDATE
  DELETE
  ASSIGN
  COMMENT
  DEPLOY
  RELEASE
  LOGIN
  LOGOUT
}

enum DeploymentStatus {
  PENDING
  IN_PROGRESS
  SUCCESS
  FAILED
  ROLLED_BACK
}

enum EnvironmentType {
  DEVELOPMENT
  STAGING
  PRODUCTION
  TESTING
}

enum ReleaseStatus {
  PLANNED
  IN_PROGRESS
  TESTING
  READY
  DEPLOYED
  CANCELLED
}
